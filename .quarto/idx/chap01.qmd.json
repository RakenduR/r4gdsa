{"title":"Geospatial Data Wrangling with R","markdown":{"yaml":{"title":"Geospatial Data Wrangling with R","date":"`r Sys.Date()`","format":"html"},"headingText":"Learning Outcome","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, \n                      eval = TRUE,\n                      message = FALSE,\n                      warning = FALSE)\n```\n\n\nIn this hands-on exercise, you will learn how to handle geospatial data in R by using **sf** package.\n\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n-   importing geospatial data by using appropriate functions of **sf** package,\n-   importing aspatial data by using appropriate function of **readr** package,\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n-   assigning or transforming coordinate systems by using using appropriate *sf* functions,\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n> Note: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntaxt and argument option before using them.\n\n## Data Acquisition\n\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)\n-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)\n-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\n\n> Note: The purpose of this section is not merely extracting the necessary data sets. It also aims to introduce you to public available data sets. Students are encouraged to explore the rest of the available data sets in these three data sources.\n\n### Extracting the geospatial data sets\n\nNext, at the `Hands-on_Ex01` folder, create a sub-folder called `data`. Then, inside the `data` sub-folder, create two sub-folders and name them `geospatial` and `aspatial` respectively.\n\nPlace `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` zipped files into `geospatial` sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.\n\n### Extracting the aspatial data set\n\nNow, you will extract the downloaded `listing` data file. At `Downloads` folder, cut and paste `listing.csv` into `aspatial` sub-folder.\n\n## Getting Started\n\nIn this hands-on exercise, two R packages will be used. They are:\n\n-   **sf** for importing, managing, and processing geospatial data, and\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\n-   **readr** for importing csv data,\n-   **readxl** for importing Excel worksheet,\n-   **tidyr** for manipulating data,\n-   **dplyr** for transforming data, and\n-   **ggplot2** for visualising data\n\nType the following code chunk.\n\n```{r}\npacman::p_load(sf, tidyverse)\n```\n\nWhat we can learn from the code chunk above:\n\n-   [`p_load`](https://cran.r-project.org/web/packages/pacman/pacman.pdf) function pf [**pacman**](https://github.com/trinker/pacman) package is used to install and load sf and tidyverse pacages into R environment.\n\n## Importing Geospatial Data\n\nIn this section, you will learn how to import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:\n\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,\n-   `CyclingPath`, a line feature layer in ESRI shapefile format, and\n-   `PreSchool`, a point feature layer in kml file format.\n\n### Importing polygon feature data in shapefile format\n\nThe code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n```{r}\nmpsz = st_read(dsn = \"chap01/data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n### Importing polyline feature data in shapefile form\n\nThe code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.\n\n```{r}\ncyclingpath = st_read(dsn = \"chap01/data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n```\n\nThe message above reveals that there are a total of 1625 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.\n\n### Importing GIS data in kml format\n\nThe `pre-schools-location-kml` is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.\n\n```{r}\npreschool = st_read(\"chap01/data/geospatial/pre-schools-location-kml.kml\")\n```\n\nThe message above reveals that `preschool` is a point feature data frame. There are a total of 1359 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.\n\n## Checking the Content of A Simple Feature Data Frame\n\nIn this sub-section, you will learn different ways to retrieve information related to the content of a simple feature data frame.\n\n### Working with *st_geometry()*\n\nThe column in the sf data.frame that contains the geometries is a list, of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\\$geom or mpsz\\[\\[1\\]\\], but the more general way uses *st_geometry()* as shown in the code chunk below.\n\n```{r}\nst_geometry(mpsz)\n\n```\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n### Working with glimpse()\n\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.\n\n```{r}\nglimpse(mpsz)\n```\n\n*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n\n### Working with *head()*\n\nSometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R\n\n```{r}\nhead(mpsz, n=5)  \n```\n\n> Note: One of the useful argument of *head()* is it allows user to select the numbers of record to display (i.e. the n argument).\n\n## Plotting the Geospatial Data\n\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find *plot()* of R Graphic comes in very handy as shown in the code chunk below.\n\n```{r}\nplot(mpsz)\n```\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\n```{r}\nplot(st_geometry(mpsz))\n```\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n```{r}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n> Note: *plot()* is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.\n\n## Working with Projection\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.\n\n### Assigning EPSG code to a simple feature data frame\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nThis is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.\n\n```{r}\nst_crs(mpsz)\n```\n\nAlthough `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).\n\nIn order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.\n\n```{r}\nmpsz3414 <- st_set_crs(mpsz, 3414)\n```\n\nNow, let us check the CSR again by using the code chunk below.\n\n```{r}\nst_crs(mpsz3414)\n```\n\nNotice that the EPSG code is 3414 now.\n\n### Transforming the projection of preschool from wgs84 to svy21.\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\n```{r echo=FALSE}\nst_geometry(preschool)\n```\n\nThis is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.\n\nLet us perform the projection transformation by using the code chunk below.\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n```\n\n> Note: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\n\n```{r echo=FALSE}\nst_geometry(preschool3414)\n```\n\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\n## Importing and Converting An Aspatial Data\n\nIn practice, it is not unusual that we will come across data such as `listing` of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\n\nFor the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.\n\n### Importing the aspatial data\n\nSince `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).\n\n```{r}\nlistings <- read_csv(\"chap01/data/aspatial/listings.csv\")\n```\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.\n\n```{r}\nlist(listings) \n```\n\nThe output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.\n\n### Creating a simple feature data frame from an aspatial data frame\n\nThe code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages\n\n```{r}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n\nThings to learn from the arguments above:\n\n-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).\n-   *%\\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n```{r}\nglimpse(listings_sf)\n```\n\nTable above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.\n\n## Geoprocessing with sf package\n\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\n\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.\n\n### Buffering\n\nThe scenario:\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nThe solution:\n\nFirstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths\n\n```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n```\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n```{r}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n```\n\nLastly, sum() of Base R will be used to derive the total land involved\n\n```{r}\nsum(buffer_cycling$AREA)\n```\n\n**Mission Accomplished!**\n\n### Point-in-polygon count\n\nThe scenario:\n\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\nThe solution:\n\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n```{r}\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n```\n\n> **Warning**: You should not confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).\n\nYou can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.\n\n```{r}\nsummary(mpsz3414$`PreSch Count`)\n```\n\nTo list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.\n\n```{r}\ntop_n(mpsz3414, 1, `PreSch Count`)\n```\n\n> **DIY: Calculate the density of pre-school by planning subzone.**\n\nThe solution:\n\nFirstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.\n\n```{r}\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n```\n\nNext, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/index.html) package is used to compute the density by using the code chunk below.\n\n```{r}\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n\n## Explorotary Data Analysis (EDA)\n\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.\n\nFirstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.\n\n```{r}\nhist(mpsz3414$`PreSch Density`)\n```\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\n\nIn the code chunk below, appropriate **ggplot2** functions will be used.\n\n```{r}\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n```\n\n> **DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**\n\nThe solution:\n\n```{r}\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n```\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"chap01.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","bibliography":["references.bib"],"editor":"visual","theme":"cosmo","title":"Geospatial Data Wrangling with R","date":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"chap01.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt","title":"Geospatial Data Wrangling with R","date":"`r Sys.Date()`"},"extensions":{"book":{}}}}}